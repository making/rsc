_rsc() {
    local i cur prev opts cmds
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd=""
    opts=""

    for i in ${COMP_WORDS[@]}
    do
        case "${i}" in
            rsc)
                cmd="rsc"
                ;;
            
            *)
                ;;
        esac
    done

    case "${cmd}" in
        rsc)
            opts=" -d -h -m -q -r -u -v -w -V  --authBearer --authBasic --channel --completion --data --dataMimeType --debug --delayElements --fnf --help --interactionModel --limitRate --log --metadata --metadataMimeType --printB3 --quiet --route --request --resume --retry --setupData --setupMetadata --setupMetadataMimeType --showSystemProperties --stacktrace --stream --take --trace --authSimple --version --wiretap --wsHeader --zipkinUrl  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                
                --authBearer)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --authBasic)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --completion)
                    COMPREPLY=($(compgen -W "bash zsh fish powershell" -- "${cur}"))
                    return 0
                    ;;
                --data)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -d)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dataMimeType)
                    COMPREPLY=($(compgen -W "application/avro application/cbor application/graphql application/gzip application/javascript application/json application/octet-stream application/pdf application/vnd.apache.thrift.binary application/vnd.google.protobuf application/xml application/zip audio/aac audio/mp3 audio/mp4 audio/mpeg3 audio/mpeg audio/ogg audio/opus audio/vorbis image/bmp image/gif image/heic-sequence image/heic image/heif-sequence image/heif image/jpeg image/png image/tiff multipart/mixed text/css text/csv text/html text/plain text/xml video/H264 video/H265 video/VP8 application/x-hessian application/x-java-object application/cloudevents+json message/x.rsocket.mime-type.v0 message/x.rsocket.accept-mime-types.v0 message/x.rsocket.authentication.v0 message/x.rsocket.tracing-zipkin.v0 message/x.rsocket.routing.v0 message/x.rsocket.composite-metadata.v0" -- "${cur}"))
                    return 0
                    ;;
                --delayElements)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --help)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -h)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --interactionModel)
                    COMPREPLY=($(compgen -W "REQUEST_RESPONSE REQUEST_STREAM REQUEST_CHANNEL FIRE_AND_FORGET" -- "${cur}"))
                    return 0
                    ;;
                --limitRate)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --log)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --metadata)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -m)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --metadataMimeType)
                    COMPREPLY=($(compgen -W "application/avro application/cbor application/graphql application/gzip application/javascript application/json application/octet-stream application/pdf application/vnd.apache.thrift.binary application/vnd.google.protobuf application/xml application/zip audio/aac audio/mp3 audio/mp4 audio/mpeg3 audio/mpeg audio/ogg audio/opus audio/vorbis image/bmp image/gif image/heic-sequence image/heic image/heif-sequence image/heif image/jpeg image/png image/tiff multipart/mixed text/css text/csv text/html text/plain text/xml video/H264 video/H265 video/VP8 application/x-hessian application/x-java-object application/cloudevents+json message/x.rsocket.mime-type.v0 message/x.rsocket.accept-mime-types.v0 message/x.rsocket.authentication.v0 message/x.rsocket.tracing-zipkin.v0 message/x.rsocket.routing.v0 message/x.rsocket.composite-metadata.v0" -- "${cur}"))
                    return 0
                    ;;
                --route)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -r)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --resume)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --retry)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --setupData)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --setupMetadata)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --setupMetadataMimeType)
                    COMPREPLY=($(compgen -W "text/plain application/json message/x.rsocket.authentication.v0 message/x.rsocket.authentication.basic.v0 message/x.rsocket.application+json" -- "${cur}"))
                    return 0
                    ;;
                --take)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --trace)
                    COMPREPLY=($(compgen -W "UNDECIDED NOT_SAMPLE SAMPLE DEBUG" -- "${cur}"))
                    return 0
                    ;;
                --authSimple)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -u)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --wsHeader)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --zipkinUrl)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        
    esac
}

complete -F _rsc -o bashdefault -o default rsc
